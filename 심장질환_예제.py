# -*- coding: utf-8 -*-
"""심장질환_예제.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aVOPOuQY2AEARZxcZZwRT6BkuS1bPw-I

실습과제: 본인이 자유롭게 선정한 데이터셋으로 머신러닝 코드 작성하기

- 지도학습: K최근접이웃, 선형회귀, 로지스틱회귀, 결정트리
 - 분류: 얘가 어떤 카테고리인지 맞혀봐
 - 회귀: 얘가 어떤 값일지 맞혀봐
- 비지도학습: K평균, PCA(차원축소)
 - 분류: 얘가 어떤 카테고리일지 니가 알아서 나눠봐

우리가 공부했던 위 내용들 중 코드를 짜보고 싶은 주제가 하나 정도는 있을 것이다. 골라서 진행하자

중요! 데이터셋은 뭘로? 캐글을 참고!
ex) 분류 == classification 데이터셋 검색

캐글에서 자신이 선정한 주제에 맞는 데이터셋을 자유롭게 골라보자

3교시까지 개별진행 후 4교시쯤에는 조별로 이야기를 나누어서 누가 발표를 할지 선정한다.

# CHD: 관상동맥질환 데이터를 이용한 로지스틱 회귀
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.metrics import accuracy_score
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.linear_model import LinearRegression

CHD = pd.read_csv("CHD.csv")

CHD_df = pd.DataFrame(CHD)

CHD_df.head()

CHD_df.isnull().sum()

CHD_df['education'] = CHD_df['education'].fillna(CHD_df['education'].median())
CHD_df['cigsPerDay'] = CHD_df['cigsPerDay'].fillna(CHD_df['cigsPerDay'].median())
CHD_df['BPMeds'] = CHD_df['BPMeds'].fillna(CHD_df['BPMeds'].median())
CHD_df['totChol'] = CHD_df['totChol'].fillna(CHD_df['totChol'].median())
CHD_df['BMI'] = CHD_df['BMI'].fillna(CHD_df['BMI'].median())
CHD_df['heartRate'] = CHD_df['heartRate'].fillna(CHD_df['heartRate'].median())
CHD_df['glucose'] = CHD_df['glucose'].fillna(CHD_df['glucose'].median())

CHD_df.isnull().sum()

CHD_df.corr()

CHD_data = CHD_df.iloc[:, 0:15]
CHD_target = CHD_df['TenYearCHD']

print(CHD_data)
print(CHD_target)

print(CHD_data.shape)
print(CHD_target.shape)

ss = StandardScaler()
CHD_scaled = ss.fit_transform(CHD_data)

print(CHD_scaled)
print(CHD_scaled.shape)

train_input, test_input, train_target, test_target = train_test_split(
    CHD_scaled, CHD_target, test_size=0.3, random_state=23
)
print(train_input.shape, test_input.shape)

model = Sequential()
model.add(Dense(1, input_dim=15, activation='sigmoid'))

callback = EarlyStopping(monitor='loss', patience=8) ## epochs 조기종료

model.compile(optimizer='sgd', loss='binary_crossentropy')
model.fit(train_input, train_target, epochs=500,
    callbacks=[callback])

pred = model.predict(test_input)
accuracy_score(test_target, np.round(pred))

"""결과가 0.7로 10년 후 관상동맥심질환의 걸릴 확률이 높다"""

model.predict([[1.1531919, -1.23495068, 2.00655919, -3.245678, 4.5678912, -5.7891234, 6.9012345, -7.1234567, 8.2345678, -9.3456789, 10.456789, -11.5678901, 12.6789012, -13.7890123, 14.8901234]])

"""## 시각화

## 종속변수와 독립변수간의 상관관계
"""

# currentSmoker: 현재흡연자, BPMeds: 혈압약 복용여부, prevalentstroke: 뇌졸중
# prevalentHyp: 고혈압 여부, diabetes: 당뇨여부
# sysBP: 수축기 혈압, DiaBP: 확장기 혈압, heartRate: 심박수, glucose: 포도당 수준

fig, axs = plt.subplots(figsize=(16,8) , ncols=5 , nrows=2)
lm_features = ['age', 'currentSmoker', 'BPMeds', 'prevalentStroke',
               'prevalentHyp', 'diabetes','sysBP', 'diaBP', 'heartRate', 'glucose']

for i , feature in enumerate(lm_features):
    row = int(i/5)
    col = i%5
    sns.lineplot(x=feature , y='TenYearCHD',data=CHD_df, ax=axs[row][col])

plt.show()